package templates

import (
	"sjb_site/internal/middleware"
	"fmt"
)

templ header(title string) {
	<head>
		<title>{ title }</title>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<!--<script src="/static/script/htmx.min.js" nonce={ middleware.GetHtmxNonce(ctx) }></script>-->
        <script src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>		
        <script src="https://unpkg.com/htmx-ext-response-targets@2.0.0/response-targets.js"></script>
        <script src="code.iconify.design/1/1.0.6/iconify.min.js"></script>
        <!--<script src="/static/script/response-targets.js" nonce={ middleware.GetResponseTargetsNonce(ctx) }></script>-->
		<!--<link rel="stylesheet" href="/static/css/style.min.css" nonce={ middleware.GetTwNonce(ctx) }/>-->
		<link rel="stylesheet" href="/static/css/style.min.css"/>
        <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>


        // if os.Getenv("env") == "production" {
		// 	<link rel="stylesheet" href="static/css/style.min.css" nonce={ middleware.GetTwNonce(ctx) }/>
		// } else {
		// 	<link rel="stylesheet" href="static/css/style.css" nonce={ middleware.GetTwNonce(ctx) }/>
		// }
	</head>
}

templ footer() {
    <footer class="bg-neutral-800 text-neutral-300 p-4">
        test
    </footer>
}

templ nav() {
    {{ user := middleware.GetUser(ctx) }}
	<nav class="p-4 bg-[url('/static/img/header_background_lijn.png')]">
		<div class="container flex justify-between">
			<ol class="flex space-x-4">
				<li class="relative">
					<a class="flex text-red-600 gap-2 p-2 items-center" href="/">Home</a>
				</li>
				<li class="relative">
					<a class="flex text-red-600 gap-2 p-2 items-center" href="/about">About</a>
				</li>
				if user != nil {
                    <li x-data="{
                        open: false,
                        toggle() {
                            if (this.open) {
                                return this.close()
                            }
                            this.$refs.button.focus()
                            this.open = true
                        },
                        close() {
                            if (! this.open) return
                            this.open = false
                        }
                        }"
                        x-on:keydown.escape.prevent.stop="close()"
                        x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
                        x-id="['dropdown-button']"
                        @mouseleave="close()"
                        class="relative"
                        >
                        <!-- Button -->
                        <a
                            href="/webalmanak/leden"    
                            x-ref="button"
                            x-on:click="toggle()"
                            @mouseover="open = true"
                            :aria-expanded="open"
                            :aria-controls="$id('dropdown-button')"
                            type="button"
                            class="flex items-center gap-2 p-2 text-red-600"
                            >
                            Webalmanak
                        </a>
                        <!-- Panel -->
                        <div
                            x-ref="panel"
                            x-show="open"
                            x-transition.origin.top.left
                            x-on:click.outside="close()"
                            :id="$id('dropdown-button')"
                            @mouseleave="close()"
                            style="display: none;"
                            class="absolute left-0 w-40 rounded-md bg-white shadow-md"
                        >
                            <a href="/webalmanak/leden" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                Leden
                            </a>
                            <a href="/webalmanak/jaarclub" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                Jaarclubs
                            </a>
                            <a href="/webalmanak/gilde" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                Gilde
                            </a>
                            <a href="/webalmanak/commissie" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                Commissies
                            </a>
                        </div>
                    </li>
                }
			</ol>
			<ol class="flex space-x-4">
				if user != nil {
                    <li>
                        <a class="text-red-600" href={ templ.URL(fmt.Sprintf("/webalmanak/leden/%d", user.ID)) }>Profiel</a>
                    </li>
                    if middleware.IsAdmin(ctx) {
                        <li>
                            <a class="text-red-600" href="/admin">Admin</a>
                        </li>
                    }
                    <li>
                        <button class="text-red-600" hx-target="body" hx-swap="innerHTML" hx-post="/logout">Uitloggen</button>
                    </li>
				} else {
					<li>
						<a class="text-red-600" href="/login">Login</a>
					</li>
				}
			</ol>
		</div>
	</nav>
}

templ Layout(contents templ.Component, title string) {
	@header(title)
	<body class="bg-fixed" style="background-image: url('/static/img/delft_background.jpg');">
        <div class="w-full">
            <div class="flex flex-col h-full  w-full lg:w-[1024px] mx-auto">
                <div class="bg-primary shadow-xl">
                    @nav()
                </div>
                <main class="rounded-t-lg bg-primary flex-1 shadow-xl mt-5 p-7">
                    @contents
                </main>
                @footer()
            </div>
        </div>
	</body>
}

templ BannerLayout(contents templ.Component, banner string, title string) {
	@header(title)
        <body class="bg-fixed" style="background-image: url('/static/img/delft_background.jpg');">
        <div class="w-full">
            <div class="flex flex-col h-full  w-full lg:w-[1024px] mx-auto">
                <div class="bg-primary shadow-xl">
                    @nav()
                </div>
                <div class="rounded-b-lg bg-primary shadow-xl ">
                    <div class="w-full h-80">
                        <image class="w-full h-full object-cover" src={ banner } alt="banner"/>
                    </div>
                    <h1 class="text-secondary-600 text-2xl p-3 pl-5">{ title }</h1>
                </div>

                <main class="rounded-t-lg bg-primary flex-1 shadow-xl mt-5 p-7">
                    @contents
                </main>
                @footer()
            </div>
        </div>
	</body>
}

templ Sidebar(main templ.Component, sidebar templ.Component) {
    <div class="flex flex-col lg:flex-row justify-between lg:h-full">
        <div class="w-full lg:h-full lg:w-3/4">
            @main
        </div>
        <div class="w-full ml-5 lg:h-full lg:w-1/4 max-md:mt-10 max-md:pt-5 max-md:border-t-2 lg:border-l-2 border-red-600 pl-5">
            @sidebar
        </div>
    </div>
}
